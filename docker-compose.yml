version: "3.5"
services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app
  rabbitmq:
    image: rabbitmq:3.9-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./docker/rabbit-mq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./docker/rabbit-mq/rabbitmq.conf:/etc/rabbitmq/conf.d/rabbitmq.conf
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app
  orders-db:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb"
    networks:
      - app
  db-orders-creator:
    image: amazon/aws-cli
    depends_on:
      - "orders-db"
    links:
      - "orders-db"
    environment:
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'
      REGION: 'eu-west-1'
    command: [ "dynamodb", "create-table", "--table-name", "orders", "--attribute-definitions", "AttributeName=PK,AttributeType=S" , "--key-schema", "AttributeName=PK,KeyType=HASH", "--billing-mode", "PAY_PER_REQUEST", "--endpoint-url", "http://orders-db:8000", "--region", "eu-west-1" ]
    networks:
      - app
  products-db:
    image: amazon/dynamodb-local:latest
    ports:
      - "8001:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb"
    networks:
      - app
  db-products-creator:
    image: amazon/aws-cli
    depends_on:
      - "products-db"
    links:
      - "products-db"
    environment:
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'
      REGION: 'eu-west-1'
    volumes:
      - ./docker/dynamo/gsi.json:/aws/gsi.json
    command: |
      dynamodb create-table --table-name products
      --attribute-definitions AttributeName=PK,AttributeType=S AttributeName=SK,AttributeType=S AttributeName=GSI1PK,AttributeType=S AttributeName=amountSold,AttributeType=N AttributeName=GSI2PK,AttributeType=S AttributeName=GSI3PK,AttributeType=S AttributeName=totalValue,AttributeType=N
      --key-schema AttributeName=PK,KeyType=HASH AttributeName=SK,KeyType=RANGE
      --endpoint-url http://products-db:8000
      --billing-mode PAY_PER_REQUEST
      --region eu-west-1
      --global-secondary-indexes file://gsi.json
    networks:
      - app
  mc-svc-products:
    environment:
      RABBITMQ_USER: "guest"
      RABBITMQ_PASSWORD: "guest"
      RABBITMQ_HOST: "rabbitmq:5672"
      AWS_REGION: "eu-west-1"
      DYNAMODB_PRODUCTS_ENDPOINT: "http://products-db:8000"
      PRODUCTS_SVC_INCOMING_QUEUE: "products_ingest"
    build:
      context: .
      dockerfile: docker/products/Dockerfile
    ports:
      - "3008:3001"
    depends_on:
      - redis
      - products-db
      - rabbitmq
    networks:
      - app
  mc-svc-orders:
    environment:
      RABBITMQ_USER: "guest"
      RABBITMQ_PASSWORD: "guest"
      RABBITMQ_HOST: "rabbitmq:5672"
      AWS_REGION: "eu-west-1"
      ORDERS_SVC_OUTGOING_QUEUE: "products"
      PRODUCTS_SVC_INCOMING_QUEUE: "products_ingest"
      DYNAMODB_ORDERS_ENDPOINT: "http://orders-db:8000"
    build:
      context: .
      dockerfile: docker/orders/Dockerfile
    ports:
      - "3009:3001"
    depends_on:
      - redis
      - orders-db
      - rabbitmq
    networks:
      - app
networks:
  app:
    driver: bridge